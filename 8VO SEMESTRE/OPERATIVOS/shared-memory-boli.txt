#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/mman.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

float time_diff(struct timeval *start, struct timeval *end) {
  return (end->tv_sec - start->tv_sec) + 1e-6 * (end->tv_usec - start->tv_usec);
}

int main(int argc, char *argv[]) {
  pid_t pid;
  int status;

  struct timeval tvalBefore;
  struct timeval tvalAfter;

  // TODO: STRUCTURA SHARED MEMORY INICIALIZAR
  /* the size (in bytes) of shared memory object */
  const int SIZE = sizeof(tvalBefore);
  /* name of the shared memory object */
  const char *name = "OS";
  /* shared memory file descriptor */
  int shm_fd;
  /* pointer to shared memory obect */
  void *ptr;
  void *ptr_read;
  /* create the shared memory object */
  shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);
  /* configure the size of the shared memory object */
  ftruncate(shm_fd, SIZE);
  /* memory map the shared memory object */
  ptr = mmap(0, SIZE, PROT_WRITE, MAP_SHARED, shm_fd, 0);

  if (ptr == MAP_FAILED) {
    printf("Error creando shared memory\n");
    exit(EXIT_FAILURE);
  } else {
    pid = fork();
    if (pid == -1) {
      printf("Error en el fork\n");
      exit(EXIT_FAILURE);
    } else if (pid == 0) {
      printf("Soy el hijo con id: %d!\n", getpid());
      gettimeofday(&tvalBefore, NULL);

      *(struct timeval *)ptr = tvalBefore;
      // ptr += sizeof(tBefore);
      printf("soy un puntero jeje %ld", tvalBefore.tv_sec);
      if (execvp(argv[1], &argv[1]) < 0) {
        printf("ERROR: fallo de ejecucion\n");
        exit(1);
      }

      // TODO: STRUCTURA SHARED MEMORY ESCRIBIR

    } else {

      if (waitpid(pid, &status, 0) > 0) {
        if (WIFEXITED(status)) {
          printf("ejecucion primer hijo terminada\n");
          gettimeofday(&tvalAfter, NULL);

          // TODO: LEER SHARED MEMORY IMPRIMIR VALOR
          /* open the shared memory object */
          shm_fd = shm_open(name, O_RDONLY, 0666);

          /* memory map the shared memory object */
          ptr_read = mmap(0, SIZE, PROT_READ, MAP_SHARED, shm_fd, 0);

          /* read from the shared memory object */
          tvalBefore = *(struct timeval *)ptr_read;

          /* remove the shared memory object */
          shm_unlink(name);

          printf("Time: %f \n", time_diff(&tvalBefore, &tvalAfter));

        } else if (WIFSIGNALED(status)) {
          psignal(WTERMSIG(status), "se√±al de salida");
        }
      } else {
        printf("waitpid() tuvo un error\n");
        exit(-1);
      }
    }
  }

  return 0;
}
