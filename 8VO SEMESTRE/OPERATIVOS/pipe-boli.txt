#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <time.h>


typedef struct {
	struct timeval start;
} ti_pipe;


float time_diff(struct timeval *start, struct timeval *end)
{
    return (end->tv_sec - start->tv_sec) + 1e-6*(end->tv_usec - start->tv_usec);
}

int main(int argc, char **argv) {
    struct timeval start, end;
    int pipefds[2],status,returnstatus
    returnstatus = pipe(pipefds);

    if(argc == 1){
		fprintf(stderr, "Error of use: Need argument\n");
		exit(EXIT_FAILURE);
	}
	if( returnstatus< 0){
		perror("Failed to open pipe");
		exit(EXIT_FAILURE);
	}
    else {
        int pid = fork();
        if(pid == 0){       
            gettimeofday(&start, NULL);
            close(pipefds[0]); 
            write(pipefds[1], &(start), sizeof(start));
            close(pipefds[1]);
            execvp(argv[1], &argv[1]);
        }else if(pid < 0){
            perror("Call to fork failed");  
            exit(1);
        }else{
            if (waitpid(pid, &status, 0) > 0) // return pid the process if the call system it's ok
            {
                if (WIFEXITED(status)){// WIFEXITED(status) child exited normally
                    ti_pipe *ti_pipe1;
                    gettimeofday(&end, NULL);  
                    close(pipefds[1]); 
                    read(pipefds[0], &(start), sizeof(start));
                    close(pipefds[0]); 
                    printf("time spent: %0.8f\n",time_diff(&start, &end));
                } 
                else if (WIFSIGNALED(status))                         //child exited because a signal was not caught
                    psignal(WTERMSIG(status), "Exit signal");
            }
            else
            {
                printf("waitpid() failed\n");
                exit(-1);
                }
            
        }
    }
    
   return 0;
}